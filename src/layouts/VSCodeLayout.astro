---
// VSCodeLayout.astro
const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title || 'Levi Lucena - Portfolio IDE'}</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Sniglet:wght@400;800&display=swap">
    <script is:inline>
      // Add theme toggle logic to handle user preference
      (function() {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const storedTheme = localStorage.getItem('theme');
        const theme = storedTheme || (prefersDark ? 'vscode-dark' : 'vscode-light');
        
        document.body.classList.add(theme);
      })();
    </script>
    <style>
      :root {
        /* VSCode Dark Theme Colors */
        --vscode-bg: #1e1e1e;
        --vscode-sidebar-bg: #333333;
        --vscode-editor-bg: #1e1e1e;
        --vscode-text: #d4d4d4;
        --vscode-text-secondary: #9e9e9e;
        --vscode-accent: #0078d4;
        --vscode-border: #454545;
        --vscode-tab-inactive: #2d2d2d;
        --vscode-tab-active: #1e1e1e;
        --vscode-activity-bar: #333333;
        --vscode-activity-bar-active: #252526;
        --vscode-status-bar: #0078d4;
        --vscode-status-bar-text: #ffffff;
        --vscode-button-bg: #0e639c;
        --vscode-button-hover: #1177bb;
        
        /* VSCode Light Theme Colors */
        --vscode-light-bg: #ffffff;
        --vscode-light-sidebar-bg: #f3f3f3;
        --vscode-light-editor-bg: #ffffff;
        --vscode-light-text: #333333;
        --vscode-light-text-secondary: #616161;
        --vscode-light-accent: #0067b0;
        --vscode-light-border: #e5e5e5;
        --vscode-light-tab-inactive: #f3f3f3;
        --vscode-light-tab-active: #ffffff;
        --vscode-light-activity-bar: #f3f3f3;
        --vscode-light-activity-bar-active: #e5e5e5;
        --vscode-light-status-bar: #0078d4;
        --vscode-light-status-bar-text: #ffffff;
        --vscode-light-button-bg: #0067b0;
        --vscode-light-button-hover: #005a9e;
        
        /* Syntax Highlighting Colors */
        --keyword: #569cd6;
        --string: #ce9178;
        --function: #dcdcaa;
        --method: #dcdcaa;
        --comment: #6a9955;
        --property: #9cdcfe;
        --number: #b5cea8;
        --template: #ce9178;
        --class: #4ec9b0;
        --type: #4ec9b0;
      }

      /* VSCode Dark Theme */
      .vscode-dark {
        --vscode-current-bg: var(--vscode-bg);
        --vscode-current-sidebar-bg: var(--vscode-sidebar-bg);
        --vscode-current-editor-bg: var(--vscode-editor-bg);
        --vscode-current-text: var(--vscode-text);
        --vscode-current-text-secondary: var(--vscode-text-secondary);
        --vscode-current-accent: var(--vscode-accent);
        --vscode-current-border: var(--vscode-border);
        --vscode-current-tab-inactive: var(--vscode-tab-inactive);
        --vscode-current-tab-active: var(--vscode-tab-active);
        --vscode-current-activity-bar: var(--vscode-activity-bar);
        --vscode-current-activity-bar-active: var(--vscode-activity-bar-active);
        --vscode-current-status-bar: var(--vscode-status-bar);
        --vscode-current-status-bar-text: var(--vscode-status-bar-text);
        --vscode-current-button-bg: var(--vscode-button-bg);
        --vscode-current-button-hover: var(--vscode-button-hover);
      }

      /* VSCode Light Theme */
      .vscode-light {
        --vscode-current-bg: var(--vscode-light-bg);
        --vscode-current-sidebar-bg: var(--vscode-light-sidebar-bg);
        --vscode-current-editor-bg: var(--vscode-light-editor-bg);
        --vscode-current-text: var(--vscode-light-text);
        --vscode-current-text-secondary: var(--vscode-light-text-secondary);
        --vscode-current-accent: var(--vscode-light-accent);
        --vscode-current-border: var(--vscode-light-border);
        --vscode-current-tab-inactive: var(--vscode-light-tab-inactive);
        --vscode-current-tab-active: var(--vscode-light-tab-active);
        --vscode-current-activity-bar: var(--vscode-light-activity-bar);
        --vscode-current-activity-bar-active: var(--vscode-light-activity-bar-active);
        --vscode-current-status-bar: var(--vscode-light-status-bar);
        --vscode-current-status-bar-text: var(--vscode-light-status-bar-text);
        --vscode-current-button-bg: var(--vscode-light-button-bg);
        --vscode-current-button-hover: var(--vscode-light-button-hover);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Sniglet', 'JetBrains Mono', monospace;
        font-weight: 400;
        background-color: var(--vscode-current-bg);
        color: var(--vscode-current-text);
        height: 100vh;
        overflow: hidden;
      }
      
      h1, h2, h3, h4, h5, h6 {
        font-family: 'Sniglet', 'JetBrains Mono', monospace;
        font-weight: 800;
      }

      .vscode-window {
        display: flex;
        flex-direction: column;
        height: 100vh;
        border: 1px solid var(--vscode-current-border);
      }

      /* Top menu bar */
      .top-menu-bar {
        display: flex;
        align-items: center;
        padding: 0 10px;
        height: 30px;
        background-color: var(--vscode-current-bg);
        border-bottom: 1px solid var(--vscode-current-border);
        -webkit-app-region: drag;
      }

      .window-controls {
        display: flex;
        gap: 8px;
        margin-right: 15px;
      }

      .window-btn {
        width: 12px;
        height: 12px;
        border-radius: 50%;
      }

      .window-btn.close {
        background-color: #ff5f57;
      }

      .window-btn.minimize {
        background-color: #ffbd2e;
      }

      .window-btn.maximize {
        background-color: #28ca42;
      }

      .menu-items {
        display: flex;
        gap: 15px;
        margin-right: auto;
      }

      .menu-item {
        padding: 4px 6px;
        border-radius: 3px;
        font-size: 12px;
        cursor: pointer;
      }

      .menu-item:hover {
        background-color: var(--vscode-current-activity-bar-active);
      }

      .title-bar {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        font-size: 12px;
        white-space: nowrap;
      }

      /* Main content area */
      .main-content {
        display: flex;
        flex: 1;
        overflow: hidden;
      }

      /* Activity bar */
      .activity-bar {
        width: 50px;
        background-color: var(--vscode-current-activity-bar);
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px 0;
        border-right: 1px solid var(--vscode-current-border);
      }

      .activity-icon {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        margin-bottom: 8px;
        cursor: pointer;
        color: var(--vscode-current-text-secondary);
      }

      .activity-icon:hover {
        background-color: var(--vscode-current-activity-bar-active);
        color: var(--vscode-current-text);
      }

      .activity-icon.active {
        background-color: var(--vscode-current-activity-bar-active);
        color: var(--vscode-current-accent);
      }

      .activity-icon i {
        font-size: 16px;
      }

      /* Sidebar */
      .sidebar {
        width: 250px;
        background-color: var(--vscode-current-sidebar-bg);
        display: flex;
        flex-direction: column;
        border-right: 1px solid var(--vscode-current-border);
        overflow: hidden;
        position: relative;
      }

      /* Panel */
      .panel {
        display: none;
        flex: 1;
        overflow: hidden;
        flex-direction: column;
        position: absolute;
        top: 35px; /* Account for panel header */
        left: 0;
        right: 0;
        bottom: 0;
      }

      .panel.active {
        display: flex;
        z-index: 1;
        position: relative;
      }

      /* Ensure inactive panels don't interfere with other elements */
      .sidebar .panel:not(.active) {
        display: none; /* Actually hide the panel completely when not active */
        visibility: hidden;
        opacity: 0;
        height: 0;
        overflow: hidden;
        position: absolute;
        z-index: -1;
      }

      /* Panel header */
      .panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 12px;
        border-bottom: 1px solid var(--vscode-current-border);
        font-size: 11px;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--vscode-current-text-secondary);
        flex-shrink: 0; /* Prevent header from shrinking */
      }

      .panel-header i {
        cursor: pointer;
        opacity: 0.7;
      }

      .panel-header i:hover {
        opacity: 1;
      }

      .file-tree {
        flex: 1;
        overflow-y: auto;
        padding: 8px 0;
      }

      .folder {
        display: flex;
        align-items: center;
        padding: 4px 12px;
        cursor: pointer;
        font-size: 13px;
      }

      .folder:hover {
        background-color: var(--vscode-current-activity-bar-active);
      }

      .folder-icon {
        margin-right: 6px;
        font-size: 10px;
        width: 16px;
      }

      .folder-open-icon {
        color: #75beff;
      }

      .folder-name {
        font-weight: 500;
      }

      .files {
        padding-left: 20px;
      }

      .file {
        display: flex;
        align-items: center;
        padding: 4px 12px 4px 28px;
        font-size: 13px;
        cursor: pointer;
        border-left: 2px solid transparent;
      }

      .file:hover {
        background-color: var(--vscode-current-activity-bar-active);
      }

      .file.active {
        background-color: var(--vscode-current-activity-bar-active);
        border-left: 2px solid var(--vscode-current-accent);
        color: var(--vscode-current-accent);
      }

      .file i {
        margin-right: 6px;
        width: 16px;
        color: #75beff;
      }

      .search-box {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border-bottom: 1px solid var(--vscode-current-border);
      }

      .search-box i {
        margin-right: 8px;
        color: var(--vscode-current-text-secondary);
      }

      .search-box input {
        flex: 1;
        background: transparent;
        border: none;
        color: var(--vscode-current-text);
        font-family: 'JetBrains Mono', monospace;
        font-size: 13px;
        outline: none;
      }

      .search-results {
        flex: 1;
        overflow-y: auto;
        padding: 8px 0;
      }

      .git-section {
        padding: 8px;
        flex: 1;
        overflow-y: auto;
      }

      .git-changes .change {
        display: flex;
        align-items: center;
        padding: 6px 8px;
        font-size: 13px;
      }

      .git-changes .change i {
        margin-right: 8px;
        color: #75beff;
        width: 16px;
      }

      .change-status {
        margin-left: auto;
        font-size: 11px;
        padding: 2px 6px;
        background-color: rgba(220, 220, 220, 0.2);
        border-radius: 3px;
      }

      .git-actions {
        display: flex;
        gap: 8px;
        padding: 10px;
        border-top: 1px solid var(--vscode-current-border);
      }

      .git-btn {
        flex: 1;
        background-color: var(--vscode-current-button-bg);
        color: white;
        border: none;
        padding: 4px 8px;
        border-radius: 3px;
        font-family: 'JetBrains Mono', monospace;
        font-size: 12px;
        cursor: pointer;
      }

      .git-btn:hover {
        background-color: var(--vscode-current-button-hover);
      }

      /* Editor area */
      .editor-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
      }

      /* Tab bar */
      .tab-bar {
        display: flex;
        background-color: var(--vscode-current-tab-inactive);
        border-bottom: 1px solid var(--vscode-current-border);
        height: 35px;
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        align-items: center;
      }

      .tab {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        background-color: var(--vscode-current-tab-inactive);
        border-right: 1px solid var(--vscode-current-border);
        font-size: 13px;
        cursor: pointer;
        color: var(--vscode-current-text-secondary);
        min-width: 120px;
        justify-content: space-between;
      }

      .tab.active {
        background-color: var(--vscode-current-tab-active);
        color: var(--vscode-current-text);
      }

      .tab:hover {
        background-color: var(--vscode-current-activity-bar-active);
      }

      .tab-close {
        margin-left: 8px;
        font-size: 10px;
        padding: 2px;
        border-radius: 2px;
      }

      .tab-close:hover {
        background-color: rgba(128, 128, 128, 0.3);
      }

      .add-tab {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        margin-left: 4px;
        border-radius: 3px;
        cursor: pointer;
      }

      .add-tab:hover {
        background-color: var(--vscode-current-activity-bar-active);
      }

      /* Editor content */
      .editor-content {
        flex: 1;
        overflow: auto;
        padding: 20px;
        background-color: var(--vscode-current-editor-bg);
        line-height: 1.5;
        position: relative;
      }

      .content {
        display: none;
        font-family: 'JetBrains Mono', monospace;
        font-size: 14px;
        line-height: 1.6;
      }

      .content.active {
        display: block;
      }

      .code-line {
        padding: 2px 0;
        display: flex;
        align-items: center;
        position: relative;
        min-height: 20px;
      }

      .line-number {
        position: absolute;
        left: -35px;
        opacity: 0.4;
        user-select: none;
        width: 30px;
        text-align: right;
        font-size: 12px;
      }

      .indent {
        padding-left: 20px;
      }

      .double-indent {
        padding-left: 40px;
      }

      /* Syntax highlighting */
      .keyword {
        color: var(--keyword);
        font-weight: bold;
      }

      .function {
        color: var(--function);
      }

      .method {
        color: var(--method);
      }

      .property {
        color: var(--property);
      }

      .string {
        color: var(--string);
      }

      .number {
        color: var(--number);
      }

      .comment {
        color: var(--comment);
        font-style: italic;
      }

      .template {
        color: var(--template);
      }

      .class {
        color: var(--class);
      }

      .type {
        color: var(--type);
      }

      /* Form styling for contact page */
      .form-container {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid var(--vscode-current-border);
        border-radius: 4px;
        background-color: rgba(0, 0, 0, 0.1);
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-size: 13px;
        color: var(--vscode-current-text-secondary);
      }

      .form-group input,
      .form-group textarea {
        width: 100%;
        padding: 8px 10px;
        background-color: var(--vscode-current-sidebar-bg);
        border: 1px solid var(--vscode-current-border);
        border-radius: 3px;
        color: var(--vscode-current-text);
        font-family: 'JetBrains Mono', monospace;
        font-size: 13px;
      }

      .form-group input:focus,
      .form-group textarea:focus {
        outline: none;
        border-color: var(--vscode-current-accent);
      }

      .submit-btn {
        background-color: var(--vscode-current-button-bg);
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 3px;
        font-family: 'JetBrains Mono', monospace;
        font-size: 14px;
        cursor: pointer;
      }

      .submit-btn:hover {
        background-color: var(--vscode-current-button-hover);
      }

      /* Certifications styling */
      .certifications-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin: 15px 0;
      }

      .certification-category {
        margin-bottom: 20px;
        width: 100%;
      }

      .certification-category h3 {
        color: var(--vscode-current-accent);
        border-bottom: 1px solid var(--vscode-current-border);
        padding-bottom: 5px;
        margin-bottom: 10px;
      }

      .certification-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }

      .certification-badge {
        width: 80px;
        height: 80px;
        object-fit: contain;
        border: 1px solid var(--vscode-current-border);
        border-radius: 4px;
        padding: 4px;
        background-color: var(--vscode-current-sidebar-bg);
        transition: all 0.3s ease;
      }

      .certification-badge:hover {
        transform: scale(1.1);
        border-color: var(--vscode-current-accent);
        box-shadow: 0 0 8px rgba(0, 120, 212, 0.5);
        z-index: 10;
        position: relative;
      }

      .certification-badge-large {
        width: 120px;
        height: 120px;
      }

      /* Tools styling */
      .tools-container {
        margin: 15px 0;
      }

      .tools-category {
        margin-bottom: 20px;
        width: 100%;
      }

      .tools-category h3 {
        color: var(--vscode-current-accent);
        border-bottom: 1px solid var(--vscode-current-border);
        padding-bottom: 5px;
        margin-bottom: 10px;
      }

      .tools-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
      }

      .tool-item {
        display: flex;
        align-items: center;
        padding: 8px;
        background-color: var(--vscode-current-activity-bar-active);
        border-radius: 4px;
        border: 1px solid var(--vscode-current-border);
        transition: all 0.3s ease;
      }

      .tool-item:hover {
        background-color: var(--vscode-current-accent);
        color: white;
        border-color: var(--vscode-current-accent);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      .tool-icon {
        margin-right: 10px;
        font-size: 18px;
        width: 24px;
        text-align: center;
      }

      .tool-name {
        font-family: 'JetBrains Mono', monospace;
        font-size: 13px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      /* Contact links styling */
      .contact-links {
        margin: 15px 0;
      }

      .contact-links p {
        margin: 5px 0;
      }

      .contact-links img {
        vertical-align: middle;
        margin-right: 5px;
      }

      /* Status bar */
      .status-bar {
        display: flex;
        align-items: center;
        height: 22px;
        background-color: var(--vscode-current-status-bar);
        color: var(--vscode-current-status-bar-text);
        font-size: 12px;
        padding: 0 10px;
      }

      .status-item {
        display: flex;
        align-items: center;
        margin-right: 15px;
      }

      .status-item i {
        margin-right: 5px;
        font-size: 10px;
      }

      /* Coffee button */
      .coffee-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #32a852;
        color: white;
        padding: 12px 20px;
        border-radius: 50px;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 10px;
        z-index: 1000;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        transition: all 0.3s ease;
        font-family: 'JetBrains Mono', monospace;
        font-size: 14px;
        font-weight: 500;
        border: 2px solid #4ade80;
      }

      .coffee-button:hover {
        background-color: #2d8f47;
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
      }

      .coffee-text {
        white-space: nowrap;
      }

      .coffee-icon-wrapper {
        position: relative;
        display: flex;
        align-items: center;
      }

      .coffee-button .fa-coffee {
        font-size: 18px;
      }

      .steam {
        position: absolute;
        top: -10px;
        width: 4px;
        height: 10px;
        background-color: #fefee3;
        border-radius: 50%;
        opacity: 0;
        animation: steam 2s infinite;
      }

      .steam-1 {
        left: 2px;
        animation-delay: 0s;
      }

      .steam-2 {
        left: 12px;
        animation-delay: 1s;
      }

      @keyframes steam {
        0% {
          transform: translateY(0) scale(0.5);
          opacity: 0;
        }
        10% {
          opacity: 1;
        }
        90% {
          opacity: 0.8;
        }
        100% {
          transform: translateY(-15px) scale(1.2);
          opacity: 0;
        }
      }

      /* Responsive design */
      @media (max-width: 768px) {
        .sidebar {
          width: 200px;
        }
        
        .activity-bar {
          width: 40px;
        }
        
        .activity-icon {
          width: 32px;
          height: 32px;
        }
        
        .coffee-button {
          padding: 10px 16px;
          font-size: 12px;
          bottom: 15px;
          right: 15px;
        }
      }

      /* AI Chat panel styling */
      .ai-chat-container {
        display: flex;
        flex-direction: column;
        height: 80%;
        padding: 10px;
        background-color: var(--vscode-current-sidebar-bg);
        overflow: hidden;
        margin-top: -10px; /* Raise the chat container a bit more */
      }

      .ai-chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 10px;
        background-color: rgba(0, 0, 0, 0.1);
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .ai-message {
        display: flex;
        gap: 10px;
        align-items: flex-start;
        margin-bottom: 10px;
      }

      .ai-avatar {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #0078d4;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        font-size: 16px;
      }

      .ai-message-content {
        background-color: var(--vscode-current-activity-bar-active);
        padding: 8px 12px;
        border-radius: 8px;
        max-width: 80%;
      }

      .ai-message-content p {
        margin: 0 0 5px 0;
        font-size: 13px;
      }

      .ai-message-content p:last-child {
        margin-bottom: 0;
      }

      .user-message {
        display: flex;
        gap: 10px;
        align-items: flex-start;
        margin-bottom: 10px;
        flex-direction: row-reverse;
      }

      .user-message .ai-avatar {
        background-color: #32a852;
      }

      .user-message .ai-message-content {
        background-color: #2d8f47;
        color: white;
      }

      .ai-chat-input {
        display: flex;
        gap: 5px;
      }

      #aiChatInput {
        flex: 1;
        padding: 8px 10px;
        background-color: var(--vscode-current-sidebar-bg);
        border: 1px solid var(--vscode-current-border);
        border-radius: 3px;
        color: var(--vscode-current-text);
        font-family: 'JetBrains Mono', monospace;
        font-size: 13px;
      }

      #aiSendMessage {
        padding: 8px 12px;
        background-color: var(--vscode-current-button-bg);
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 14px;
      }

      #aiSendMessage:hover {
        background-color: var(--vscode-current-button-hover);
      }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  </head>
  <body class="vscode-dark">
    <div class="vscode-window">
      <!-- Top menu bar -->
      <div class="top-menu-bar">
        <div class="window-controls">
          <div class="window-btn close"></div>
          <div class="window-btn minimize"></div>
          <div class="window-btn maximize"></div>
        </div>
        <div class="menu-items">
          <span class="menu-item">Arquivo</span>
          <span class="menu-item">Editar</span>
          <span class="menu-item">Exibir</span>
          <span class="menu-item">Ir</span>
          <span class="menu-item">Executar</span>
          <span class="menu-item">Terminal</span>
          <span class="menu-item">Ajuda</span>
        </div>
        <div class="title-bar">Levi Lucena - Portfolio IDE</div>
      </div>

      <!-- Main content area -->
      <div class="main-content">
        <!-- Activity bar (left sidebar) -->
        <div class="activity-bar">
          <div class="activity-icon active" data-tab="explorer">
            <i class="fas fa-folder"></i>
          </div>
          <div class="activity-icon" data-tab="search">
            <i class="fas fa-search"></i>
          </div>
          <div class="activity-icon" data-tab="git">
            <i class="fab fa-git-alt"></i>
          </div>
          <div class="activity-icon" data-tab="debug">
            <i class="fas fa-bug"></i>
          </div>
          <div class="activity-icon" data-tab="extensions">
            <i class="fas fa-puzzle-piece"></i>
          </div>
          <div class="activity-icon" data-tab="ai">
            <i class="fas fa-robot"></i>
          </div>
          <div class="activity-icon" data-tab="theme-toggle">
            <i class="fas fa-adjust"></i>
          </div>
          <div class="activity-icon" data-tab="tools">
            <i class="fas fa-tools"></i>
          </div>
          <div class="activity-icon" data-tab="certifications">
            <i class="fas fa-certificate"></i>
          </div>
        </div>

        <!-- Sidebar panels -->
        <div class="sidebar">
          <div class="panel active" data-panel="explorer">
            <div class="panel-header">
              <span>EXPLORADOR</span>
              <i class="fas fa-ellipsis-h"></i>
            </div>
            <div class="file-tree">
              <div class="folder">
                <i class="fas fa-chevron-down folder-icon"></i>
                <i class="fas fa-folder folder-open-icon"></i>
                <span class="folder-name">DevPortfolio</span>
              </div>
              <div class="files">
                <div class="file active" data-content="about">
                  <i class="fas fa-file-code"></i>
                  <span>about-me.js</span>
                </div>
                <div class="file" data-content="skills">
                  <i class="fas fa-file-code"></i>
                  <span>skills-stack.ts</span>
                </div>
                <div class="file" data-content="tools">
                  <i class="fas fa-file-code"></i>
                  <span>tools.ts</span>
                </div>
                <div class="file" data-content="certifications">
                  <i class="fas fa-file-code"></i>
                  <span>certifications.json</span>
                </div>
                <div class="file" data-content="projects">
                  <i class="fas fa-file-code"></i>
                  <span>projects.json</span>
                </div>
                <div class="file" data-content="contact">
                  <i class="fas fa-file-code"></i>
                  <span>contact-info.html</span>
                </div>
              </div>
            </div>
          </div>

          <div class="panel" data-panel="search">
            <div class="panel-header">
              <span>PROCURAR</span>
              <i class="fas fa-ellipsis-h"></i>
            </div>
            <div class="search-box">
              <i class="fas fa-search"></i>
              <input type="text" placeholder="Digite para procurar...">
            </div>
            <div class="search-results">
              <!-- Search results would appear here -->
            </div>
          </div>

          <div class="panel" data-panel="git">
            <div class="panel-header">
              <span>CONTROLE DE VERSÃO</span>
              <i class="fas fa-ellipsis-h"></i>
            </div>
            <div class="git-section">
              <div class="git-changes">
                <div class="change">
                  <i class="fas fa-file"></i>
                  <span>about-me.js</span>
                  <span class="change-status">Modificado</span>
                </div>
              </div>
              <div class="git-actions">
                <button class="git-btn">Stash</button>
                <button class="git-btn">Commit</button>
                <button class="git-btn">Push</button>
              </div>
            </div>
          </div>

          <div class="panel" data-panel="ai">
            <div class="panel-header">
              <span>ASSISTENTE DE IA</span>
              <i class="fas fa-ellipsis-h"></i>
            </div>
            <div class="ai-chat-container">
              <div class="ai-chat-messages" id="aiChatMessages">
                <div class="ai-message">
                  <div class="ai-avatar">🤖</div>
                  <div class="ai-message-content">
                    <p>Olá! Sou o assistente de IA de Levi Lucena.</p>
                    <p>Pergunte-me sobre meus projetos, habilidades ou experiências com inteligência artificial!</p>
                  </div>
                </div>
              </div>
              <div class="ai-chat-input">
                <input type="text" id="aiChatInput" placeholder="Digite sua pergunta sobre IA, projetos ou habilidades...">
                <button id="aiSendMessage"><i class="fas fa-paper-plane"></i></button>
              </div>
            </div>
          </div>
        </div>

        <!-- Editor area -->
        <div class="editor-container">
          <!-- Tab bar -->
          <div class="tab-bar">
            <div class="tab active" data-content="about">
              <span>about-me.js</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="tab" data-content="skills">
              <span>skills-stack.ts</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="tab" data-content="tools">
              <span>tools.ts</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="tab" data-content="certifications">
              <span>certifications.json</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="tab" data-content="projects">
              <span>projects.json</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="tab" data-content="contact">
              <span>contact-info.html</span>
              <i class="fas fa-times tab-close"></i>
            </div>
            <div class="add-tab">
              <i class="fas fa-plus"></i>
            </div>
          </div>

          <!-- Editor content -->
          <div class="editor-content">
            <slot />
          </div>
        </div>
      </div>

      <!-- Status bar -->
      <div class="status-bar">
        <div class="status-item">
          <i class="fas fa-code-branch"></i>
          <span>main*</span>
        </div>
        <div class="status-item">
          <i class="fas fa-bug"></i>
          <span>0 Erros</span>
        </div>
        <div class="status-item">
          <i class="fas fa-bolt"></i>
          <span>JavaScript</span>
        </div>
        <div class="status-item">
          <i class="fas fa-sun"></i>
          <span>UTF-8</span>
        </div>
        <div class="status-item">
          <i class="fas fa-ruler-horizontal"></i>
          <span>Ln 1, Col 1</span>
        </div>
        <div class="status-item">
          <i class="fas fa-circle"></i>
          <span>Spaces: 2</span>
        </div>
      </div>
    </div>

    <!-- Buy me a coffee floating button -->
    <a class="coffee-button" href="https://www.paypal.com/donate/?hosted_button_id=58DYCL22CTERG" target="_blank">
      <span class="coffee-text">Buy me a coffee!</span>
      <span class="coffee-icon-wrapper">
        <i class="fas fa-coffee"></i>
        <span class="steam steam-1"></span>
        <span class="steam steam-2"></span>
      </span>
    </a>

    <script>
      // Main script for VSCode Portfolio
      document.addEventListener('DOMContentLoaded', function() {
        console.log('VSCode Portfolio loaded');
        
        // Theme toggle functionality
        const themeToggle = document.querySelector('.activity-icon[data-tab="theme-toggle"]');
        const body = document.body;
        
        if (themeToggle) {
          themeToggle.addEventListener('click', function() {
            if (body.classList.contains('vscode-dark')) {
              body.classList.remove('vscode-dark');
              body.classList.add('vscode-light');
              localStorage.setItem('theme', 'vscode-light');
            } else {
              body.classList.remove('vscode-light');
              body.classList.add('vscode-dark');
              localStorage.setItem('theme', 'vscode-dark');
            }
          });
        }

        // Activity bar navigation
        const activityIcons = document.querySelectorAll('.activity-icon');
        const panels = document.querySelectorAll('.panel');
        
        activityIcons.forEach(icon => {
          icon.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            
            // Remove active class from all icons and panels
            activityIcons.forEach(i => i.classList.remove('active'));
            panels.forEach(p => p.classList.remove('active'));
            
            // Add active class to clicked icon
            this.classList.add('active');
            
            // Show corresponding panel if it exists
            const correspondingPanel = document.querySelector('.panel[data-panel="' + tab + '"]');
            if (correspondingPanel) {
              correspondingPanel.classList.add('active');
            }
          });
        });

        // File navigation in sidebar
        const files = document.querySelectorAll('.file');
        const contents = document.querySelectorAll('.content');
        const tabs = document.querySelectorAll('.tab');
        
        files.forEach(file => {
          file.addEventListener('click', function() {
            const content = this.getAttribute('data-content');
            
            // Remove active class from all files
            files.forEach(f => f.classList.remove('active'));
            
            // Add active class to clicked file
            this.classList.add('active');
            
            // Hide all content sections
            contents.forEach(c => c.classList.remove('active'));
            
            // Show corresponding content
            document.getElementById(content + '-content').classList.add('active');
            
            // Update tabs
            tabs.forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-content="' + content + '"]').classList.add('active');
          });
        });

        // Tab switching
        tabs.forEach(tab => {
          tab.addEventListener('click', function() {
            const content = this.getAttribute('data-content');
            
            // Remove active class from all tabs
            tabs.forEach(t => t.classList.remove('active'));
            
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Hide all content sections
            contents.forEach(c => c.classList.remove('active'));
            
            // Show corresponding content
            document.getElementById(content + '-content').classList.add('active');
            
            // Also update file selection
            files.forEach(f => f.classList.remove('active'));
            document.querySelector('.file[data-content="' + content + '"]').classList.add('active');
          });
        });

        // Certifications functionality
        // Make sure certification images are clickable
        document.querySelectorAll('.certification-badge').forEach(badge => {
          badge.addEventListener('click', function() {
            // When clicked, the image will open in a new tab due to the <a> tag
            // This is handled by the HTML structure, not JavaScript
          });
        });

        // Basic functionality for the editor
        document.addEventListener('keydown', function(e) {
          // Simulate editor shortcuts
          if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            alert('Arquivo salvo!');
          }
        });

        // Add functionality to close tabs
        document.querySelectorAll('.tab-close').forEach(closeBtn => {
          closeBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            
            const tab = this.closest('.tab');
            if (tab) {
              const contentId = tab.getAttribute('data-content');
              const contentPanel = document.getElementById(contentId + '-content');
              const fileItem = document.querySelector('.file[data-content="' + contentId + '"]');
              
              // Don't allow closing if it's the only tab
              if (document.querySelectorAll('.tab:not(.add-tab)').length > 1) {
                tab.remove();
                if (contentPanel) contentPanel.remove();
                if (fileItem) fileItem.remove();
                
                // Show the first available tab/file if the active one was closed
                const remainingTabs = document.querySelectorAll('.tab:not(.add-tab)');
                if (remainingTabs.length > 0) {
                  const firstTab = remainingTabs[0];
                  firstTab.classList.add('active');
                  
                  const contentId = firstTab.getAttribute('data-content');
                  if (contentId) {
                    document.getElementById(contentId + '-content').classList.add('active');
                    
                    const fileItem = document.querySelector('.file[data-content="' + contentId + '"]');
                    if (fileItem) fileItem.classList.add('active');
                  }
                }
              }
            }
          });
        });
      });

      // AI Assistant functionality
      document.addEventListener('DOMContentLoaded', function() {
        const aiChatInput = document.getElementById('aiChatInput');
        const aiSendMessage = document.getElementById('aiSendMessage');
        const aiChatMessages = document.getElementById('aiChatMessages');
        
        if (!aiChatInput || !aiSendMessage || !aiChatMessages) return;
        
        // Function to add a message to the chat
        function addMessage(text, isUser = false) {
          const messageDiv = document.createElement('div');
          messageDiv.className = isUser ? 'user-message' : 'ai-message';
          
          messageDiv.innerHTML = `
            <div class="ai-avatar">${isUser ? '👤' : '🤖'}</div>
            <div class="ai-message-content">
              <p>` + text + `</p>
            </div>
          `;
          
          aiChatMessages.appendChild(messageDiv);
          aiChatMessages.scrollTop = aiChatMessages.scrollHeight;
        }
        
        // Function to get AI response based on user query
        function getAIResponse(query) {
          query = query.toLowerCase();
          
          // Knowledge base with information about Levi
          const knowledgeBase = {
            projects: [
              {
                name: 'JurisGPT Advisor',
                description: 'Plataforma juridica inteligente que simula a atuacao de um advogado virtual por meio de LLMs (GPT-4o), com classificacao automatica de area juridica, linguagem acessivel e suporte a diversas areas do Direito.',
                tech: 'React, TypeScript, Vite, shadcn/ui, Tailwind CSS, OpenAI GPT-4o, SQLite, NLP',
                url: 'https://jurisgpt-advisor.com/'
              },
              {
                name: 'IntelliDoc AI',
                description: 'Plataforma com agentes especializados para leitura, extracao e analise de documentos juridicos e administrativos com uso de RAG, OCR e NLP.',
                tech: 'LangChain, Hugging Face, Tesseract, GPT-4, FAISS, Python, Streamlit',
                url: 'https://github.com/LeviLucena/IntellidocAI'
              },
              {
                name: 'Clima Blue',
                description: 'Sistema inteligente de meteogramas focado em apoio a tomada de decisao no agronegocio, com interface web interativa, previsao climatica segmentada e dados meteorologicos confiaveis.',
                tech: 'Python, Flask, Meteoblue API, Jinja2, Docker, Dotenv',
                url: 'https://github.com/LeviLucena/ClimaBlue_Brasil'
              }
            ],
            skills: [
              'Linguagens: Python, R, TypeScript, JavaScript, PHP, SQL',
              'Frameworks: FastAPI, Flask, Django, Next.js, Dash, Streamlit',
              'IA & ML: OpenAI, Scikit-learn, PyTorch, TensorFlow, NumPy, Pandas, LangChain',
              'Frontend: React, Tailwind CSS, shadcn/ui, Framer Motion, HTML5, CSS3',
              'Data Viz: Matplotlib, Plotly, Seaborn, Power BI, Grafana',
              'Computer Vision: OpenCV, YOLOv8, Tesseract, Pillow'
            ],
            experience: 'Mais de 10 anos de experiencia em engenharia de software, inteligencia artificial e automacao de processos.',
            education: [
              'Tecnico em Administracao - ETEC Centro Paula Souza (2013)',
              'Analise e Desenvolvimento de Sistemas - Faculdade Drummond (2016)',
              'Engenharia de Software - Faculdade Impacta (2018)',
              'Especializacoes em Ciencia da Computacao, Ciencia de Dados, Programacao com Python e IA com Python - Harvard University (2023-2025)'
            ],
            ai_experience: 'Especialista em IA com experiencia em LLMs (GPT-4, Gemini), embeddings, RAG (Retrieval-Augmented Generation), NLP, classificacao semantica, OCR (Tesseract), engenharia de prompts, agentes com LangChain e n8n.',
            contact: 'Email: levigolucena@gmail.com, LinkedIn: https://www.linkedin.com/in/levilucena/, GitHub: https://github.com/LeviLucena'
          };
          
          // Simple pattern matching for responses
          if (query.includes('ola') || query.includes('oi') || query.includes('ola')) {
            return 'Ola! Sou o assistente de IA de Levi Lucena. Como posso ajudar-lo hoje?';
          } else if (query.includes('projeto') || query.includes('projetos') || query.includes('trabalho')) {
            let response = 'Aqui estao alguns dos principais projetos de Levi:';
            knowledgeBase.projects.forEach(project => {
              response += '\\n\\n• ' + project.name + ': ' + project.description + '\\nTecnologias: ' + project.tech;
            });
            return response;
          } else if (query.includes('jurisgpt') || query.includes('advogado') || query.includes('juridico')) {
            const jurisgpt = knowledgeBase.projects.find(p => p.name.includes('JurisGPT'));
            return jurisgpt.description + '\\nTecnologias: ' + jurisgpt.tech + '\\nURL: ' + jurisgpt.url;
          } else if (query.includes('intellidoc') || query.includes('documento') || query.includes('ocr')) {
            const intellidoc = knowledgeBase.projects.find(p => p.name.includes('IntelliDoc'));
            return intellidoc.description + '\\nTecnologias: ' + intellidoc.tech + '\\nURL: ' + intellidoc.url;
          } else if (query.includes('climab') || query.includes('clima') || query.includes('agronegocio')) {
            const climaBlue = knowledgeBase.projects.find(p => p.name.includes('Clima'));
            return climaBlue.description + '\\nTecnologias: ' + climaBlue.tech + '\\nURL: ' + climaBlue.url;
          } else if (query.includes('habilidade') || query.includes('tecnologia') || query.includes('tecnologias') || query.includes('skills')) {
            return 'Aqui estao as principais habilidades tecnicas de Levi:\\n' + knowledgeBase.skills.join('\\n');
          } else if (query.includes('experiencia') || query.includes('anos')) {
            return knowledgeBase.experience;
          } else if (query.includes('formacao') || query.includes('educacao') || query.includes('graduacao')) {
            return 'Formacao academica de Levi:\\n' + knowledgeBase.education.join('\\n');
          } else if (query.includes('ia') || query.includes('inteligencia artificial') || query.includes('machine learning') || query.includes('llm')) {
            return knowledgeBase.ai_experience + '\\n\\nLevi tem especializacao em IA generativa, modelos de linguagem (LLMs), RAG (Retrieval-Augmented Generation), NLP e sistemas de IA aplicados a diferentes dominios como juridico, saude e agronegocio.';
          } else if (query.includes('contato') || query.includes('email') || query.includes('linkedin')) {
            return 'Informacoes de contato de Levi:\\n' + knowledgeBase.contact;
          } else if (query.includes('python') || query.includes('linguagem') || query.includes('programacao')) {
            return 'Python e a linguagem principal de Levi, utilizada em frameworks como FastAPI, Flask, Django e bibliotecas de IA como Scikit-learn, PyTorch, TensorFlow, NumPy, Pandas, LangChain e outras.';
          } else if (query.includes('langchain') || query.includes('agentes')) {
            return 'Levi tem experiencia em desenvolver agentes de IA com LangChain e n8n, integrando LLMs (Modelos de Linguagem de Grande porte) como GPT-4 e Gemini para tarefas complexas de processamento de linguagem natural, extracao de informacoes e automacao inteligente.';
          } else if (query.includes('rag') || query.includes('retrieval')) {
            return 'RAG (Retrieval-Augmented Generation) e uma das especialidades de Levi. Ele implementa sistemas que combinam recuperacao de informacao com geracao de texto usando LLMs, como no projeto IntelliDoc AI para analise de documentos juridicos e administrativos.';
          } else {
            return 'Sou o assistente de IA de Levi Lucena. Posso responder sobre seus projetos, habilidades, experiencia e especialidades em inteligencia artificial. Tente perguntar sobre seus projetos, habilidades de IA ou experiencia profissional!';
          }
        }
        
        // Function to handle sending a message
        function sendMessage() {
          const message = aiChatInput.value.trim();
          if (!message) return;
          
          // Add user message
          addMessage(message, true);
          
          // Clear input
          aiChatInput.value = '';
          
          // Simulate AI thinking
          setTimeout(() => {
            const response = getAIResponse(message);
            addMessage(response, false);
          }, 500); // Simulate processing time
        }
        
        // Event listeners
        aiSendMessage.addEventListener('click', sendMessage);
        
        aiChatInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            sendMessage();
          }
        });
        
        // Certifications functionality
        // Make sure certification images are clickable
        document.querySelectorAll('.certification-badge').forEach(badge => {
          badge.addEventListener('click', function() {
            // When clicked, the image will open in a new tab due to the <a> tag
            // This is handled by the HTML structure, not JavaScript
          });
        });
        
        // Tools functionality - add interactivity to tool items
        document.querySelectorAll('.tool-item').forEach(tool => {
          tool.addEventListener('click', function() {
            // Highlight the clicked tool for a short time
            this.style.backgroundColor = 'var(--vscode-current-accent)';
            this.style.color = 'white';
            setTimeout(() => {
              // Reset to default appearance after click
              if (!this.matches(':hover')) {
                this.style.backgroundColor = '';
                this.style.color = '';
              }
            }, 300);
          });
        });
      });
    </script>
  </body>
</html>